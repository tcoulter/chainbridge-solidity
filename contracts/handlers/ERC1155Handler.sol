pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

import "../interfaces/IDepositExecute.sol";
import "./HandlerHelpers.sol";
import "../ERC1155Safe.sol";
import "@openzeppelin/contracts/introspection/ERC165Checker.sol";

/**
    @title Handles ERC1155 deposits and deposit executions.
    @author ChainSafe Systems.
    @notice This contract is intended to be used with the Bridge contract.
 */
contract ERC1155Handler is IDepositExecute, HandlerHelpers, ERC1155Safe {
    using ERC165Checker for address;

    struct DepositRecord {
        address _tokenAddress;
        uint8   _destinationChainID;
        bytes32 _resourceID;
        bytes   _destinationRecipientAddress;
        address _depositer;
        uint    _tokenID;
        uint    _amount;
        bytes   _extraData;
    }

    // destId => depositNonce => Deposit Record
    mapping (uint8 => mapping (uint64 => DepositRecord)) public _depositRecords;

    /**
        @param bridgeAddress Contract address of previously deployed Bridge.
        @param initialResourceIDs Resource IDs are used to identify a specific contract address.
        These are the Resource IDs this contract will initially support.
        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be
        called to perform various deposit calls.
        @param burnableContractAddresses These addresses will be set as burnable and when {deposit} is called, the deposited token will be burned.
        When {executeProposal} is called, new tokens will be minted.

        @dev {initialResourceIDs} and {initialContractAddresses} must have the same length (one resourceID for every address).
        Also, these arrays must be ordered in the way that {initialResourceIDs}[0] is the intended resourceID for {initialContractAddresses}[0].
     */
    constructor(
        address bridgeAddress,
        bytes32[] memory initialResourceIDs,
        address[] memory initialContractAddresses,
        address[] memory burnableContractAddresses
    ) public {
        require(initialResourceIDs.length == initialContractAddresses.length,
            "initialResourceIDs and initialContractAddresses len mismatch");

        _bridgeAddress = bridgeAddress;

        for (uint256 i = 0; i < initialResourceIDs.length; i++) {
            _setResource(initialResourceIDs[i], initialContractAddresses[i]);
        }

        for (uint256 i = 0; i < burnableContractAddresses.length; i++) {
            _setBurnable(burnableContractAddresses[i]);
        }
    }

    /**
        @param depositNonce This ID will have been generated by the Bridge contract.
        @param destId ID of chain deposit will be bridged to.
        @return DepositRecord which consists of:
        - _tokenAddress Address used when {deposit} was executed.
        - _destinationChainID ChainID deposited tokens are intended to end up on.
        - _resourceID ResourceID used when {deposit} was executed.
        - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain.
        - _depositer Address that initially called {deposit} in the Bridge contract.
        - _tokenID ID of ERC1155.
        - _amount Amount of tokenID to transfer.
        - _extraData Optional data field supported by ERC1155
    */
    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {
        return _depositRecords[destId][depositNonce];
    }

    /**
        @notice A deposit is initiatied by making a deposit in the Bridge contract.
        @param destinationChainID Chain ID of chain token is expected to be bridged to.
        @param depositNonce This value is generated as an ID by the Bridge contract.
        @param depositer Address of account making the deposit in the Bridge contract.
        @param data Consists of: {resourceID}, {tokenID}, {lenDestinationRecipientAddress},
        and {destinationRecipientAddress} all padded to 32 bytes.
        @notice Data passed into the function should be constructed as follows:
        tokenID                                     uint256    bytes    0  - 32
        amount                                      uint256    bytes    32 - 64
        destinationRecipientAddress     length      uint256    bytes    64 - 96
        extraData                       length      uint256    bytes    96 - 128
        destinationRecipientAddress                   bytes    bytes    128 - x where x = (128 + len(destinationRecipientAddress))
        extraData                                     bytes    bytes    x  - (x + len(extraData))

        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is
        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.
     */
    function deposit(bytes32    resourceID,
                    uint8       destinationChainID,
                    uint64      depositNonce,
                    address     depositer,
                    bytes       calldata data
                    ) external override onlyBridge {
        // payload data
        uint         tokenID;
        uint         amount;
        uint         lenDestinationRecipientAddress;
        uint         lenExtraData;
        bytes memory destinationRecipientAddress;
        bytes memory extraData;
        
        // intermediate values
        uint         byteOffset;

        (tokenID, amount, lenDestinationRecipientAddress, lenExtraData) = abi.decode(data, (uint, uint, uint, uint));

        byteOffset = 128;
        destinationRecipientAddress = bytes(data[byteOffset:byteOffset + lenDestinationRecipientAddress]);

        byteOffset += lenDestinationRecipientAddress;
        extraData = bytes(data[byteOffset:byteOffset + lenExtraData]);

        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];
        require(_contractWhitelist[tokenAddress], "provided tokenAddress is not whitelisted");

        if (_burnList[tokenAddress]) {
            burnERC1155(tokenAddress, depositer, tokenID, amount);
        } else {
            lockERC1155(tokenAddress, depositer, address(this), tokenID, amount, extraData);
        }

        _depositRecords[destinationChainID][depositNonce] = DepositRecord(
            tokenAddress,
            uint8(destinationChainID),
            resourceID,
            destinationRecipientAddress,
            depositer,
            tokenID,
            amount,
            extraData
        );
    }

    /**
        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.
        by a relayer on the deposit's destination chain.
        @param data Consists of {tokenID}, {resourceID}, {lenDestinationRecipientAddress}, {lenExtraData}
        {destinationRecipientAddress}, and {extraData} all padded to 32 bytes.
        @notice Data passed into the function should be constructed as follows:
        tokenID                                     uint256    bytes    0   - 32
        amount                                      uint256    bytes    32  - 64
        destinationRecipientAddress     length      uint256    bytes    64  - 96
        extraData                       length      uint256    bytes    96  - 128
        destinationRecipientAddress                   bytes    bytes    128 - x where x = (128 + len(destinationRecipientAddress))
        extraData                                     bytes    bytes    x   - y where y = (x + len(extraData))
     */
    function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge {
        // payload
        uint         tokenID;
        uint         amount;
        uint         lenDestinationRecipientAddress;
        uint         lenExtraData;
        bytes memory destinationRecipientAddress;
        bytes memory extraData;

        // intermediate variables
        uint         byteOffset;

        (tokenID, amount, lenDestinationRecipientAddress, lenExtraData) = abi.decode(data, (uint, uint, uint, uint));
        
        byteOffset = 128;
        destinationRecipientAddress = bytes(data[byteOffset:byteOffset + lenDestinationRecipientAddress]);

        byteOffset += lenDestinationRecipientAddress;
        extraData = bytes(data[byteOffset:byteOffset + lenExtraData]);

        bytes20 recipientAddress;

        assembly {
            recipientAddress := mload(add(destinationRecipientAddress, 0x20))
        }

        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];
        require(_contractWhitelist[address(tokenAddress)], "provided tokenAddress is not whitelisted");

        if (_burnList[tokenAddress]) {
            mintERC1155(tokenAddress, address(recipientAddress), tokenID, amount, extraData);
        } else {
            releaseERC1155(tokenAddress, address(this), address(recipientAddress), tokenID, amount, extraData);
        }
    }

    /**
        @notice Used to manually release ERC1155 tokens from ERC1155Safe.
        @param tokenAddress Address of token contract to release.
        @param recipient Address to release token to.
        @param tokenID The ERC1155 token ID to release.
        @param amount Amount of tokenID to release.
        @param extraData The data parameter required by ERC 1155 on transfer.
     */
    function withdraw(address tokenAddress, address recipient, uint tokenID, uint amount, bytes memory extraData) external override onlyBridge {
        releaseERC1155(tokenAddress, address(this), recipient, tokenID, amount, extraData);
    }

    // ERC1155 transfers aren't supported by the old withdraw() signature.
    // Revert because we don't have enough info for the transfer. 
    function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external override onlyBridge {
      revert("Wrong withdraw() signature called; use other signature");
    }
}
